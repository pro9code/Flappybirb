[
    {
        "label": "pygame",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame",
        "description": "pygame",
        "detail": "pygame",
        "documentation": {}
    },
    {
        "label": "pygame,",
        "kind": 6,
        "isExtraImport": true,
        "importPath": "pygame.",
        "description": "pygame.",
        "detail": "pygame.",
        "documentation": {}
    },
    {
        "label": "Vector2",
        "importPath": "pygame.math",
        "description": "pygame.math",
        "isExtraImport": true,
        "detail": "pygame.math",
        "documentation": {}
    },
    {
        "label": "*",
        "importPath": "pygame.locals",
        "description": "pygame.locals",
        "isExtraImport": true,
        "detail": "pygame.locals",
        "documentation": {}
    },
    {
        "label": "Background",
        "kind": 6,
        "importPath": "background",
        "description": "background",
        "peekOfCode": "class Background:\n    def __init__(self):\n        self.sprite = pygame.image.load('data/gfx/bg.png')\n        self.position = 0\n        self.uncoloredSprite = pygame.image.load('data/gfx/bg.png') \n    def setSprite(self, tint):  \n        copy = self.uncoloredSprite.copy()\n        color = colorsys.hsv_to_rgb(tint,1,1)\n        copy.fill((color[0]*255, color[1]*255, color[2]*255), special_flags=pygame.BLEND_ADD)\n        self.sprite = copy",
        "detail": "background",
        "documentation": {}
    },
    {
        "label": "Bean",
        "kind": 6,
        "importPath": "bean",
        "description": "bean",
        "peekOfCode": "class Bean: \n    def __init__(self):\n        self.sprite = pygame.image.load('data/gfx/bean.png')\n        self.position = pygame.Vector2()\n        self.position.xy",
        "detail": "bean",
        "documentation": {}
    },
    {
        "label": "Button",
        "kind": 6,
        "importPath": "button",
        "description": "button",
        "peekOfCode": "class Button:\n    def __init__(self):\n        self.price = 3\n        self.level = 1   \n    sprite = pygame.image.load('data/gfx/button.png')\n    typeIndicatorSprite = pygame.image.load('data/gfx/null_indicator.png')",
        "detail": "button",
        "documentation": {}
    },
    {
        "label": "main",
        "kind": 2,
        "importPath": "main",
        "description": "main",
        "peekOfCode": "def main():\n    pygame.init()\n    # set the display\n    DISPLAY=pygame.display.set_mode((640,480),0,32)\n    pygame.display.set_caption('Flappuccino')\n    pygame.display.set_icon(Bean().sprite)\n    # get fonts\n    font = pygame.font.Font('data/fonts/font.otf', 100)\n    font_small = pygame.font.Font('data/fonts/font.otf', 32)\n    font_20 = pygame.font.Font('data/fonts/font.otf', 20)",
        "detail": "main",
        "documentation": {}
    },
    {
        "label": "Player",
        "kind": 6,
        "importPath": "player",
        "description": "player",
        "peekOfCode": "class Player:\n    position = pygame.Vector2()\n    position.xy = 295, 100\n    velocity = pygame.Vector2()\n    velocity.xy = 3, 0\n    acceleration = 0.1\n    rightSprite = pygame.image.load('data/gfx/player.png')\n    leftSprite = pygame.transform.flip(rightSprite, True, False)\n    currentSprite = rightSprite",
        "detail": "player",
        "documentation": {}
    },
    {
        "label": "clamp",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def clamp(value, min, max):\n    if value < min:\n        return min\n    if value > max:\n        return max\n    return value\ndef checkCollisions(a_x, a_y, a_width, a_height, b_x, b_y, b_width, b_height):\n    return (a_x + a_width > b_x) and (a_x < b_x + b_width) and (a_y + a_height > b_y) and (a_y < b_y + b_height)",
        "detail": "utils",
        "documentation": {}
    },
    {
        "label": "checkCollisions",
        "kind": 2,
        "importPath": "utils",
        "description": "utils",
        "peekOfCode": "def checkCollisions(a_x, a_y, a_width, a_height, b_x, b_y, b_width, b_height):\n    return (a_x + a_width > b_x) and (a_x < b_x + b_width) and (a_y + a_height > b_y) and (a_y < b_y + b_height)",
        "detail": "utils",
        "documentation": {}
    }
]